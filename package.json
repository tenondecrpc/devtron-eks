{
  "name": "eks-cdk",
  "version": "0.1.0",
  "bin": {
    "main": "bin/main.js"
  },
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "cdk": "cdk",
    "deploy": "cdk deploy --require-approval never --profile AWS_PROFILE",
    "destroy": "cdk destroy --profile AWS_PROFILE",
    "connect": "echo 'To connect to the EKS cluster:' && echo '' && echo '1. Automatic option (uses default name):' && echo '   npm run connect-cluster' && echo '' && echo '2. Manual option (specify cluster name):' && echo '   aws eks update-kubeconfig --region us-east-1 --name devtron-dev-cluster --profile AWS_PROFILE' && echo '' && echo 'After connecting, verify with:' && echo '   npm run status'",
    "connect-cluster": "echo 'Connecting to EKS cluster...' && aws eks update-kubeconfig --region us-east-1 --name devtron-dev-cluster --profile AWS_PROFILE && echo '‚úÖ Connection configured. Verifying...' && kubectl cluster-info",
    "status": "kubectl cluster-info && kubectl get nodes",
    "pods": "kubectl get pods -A",
    "services": "kubectl get svc -A",
    "nodes": "kubectl get nodes --label-columns=eks.amazonaws.com/nodegroup",
    "events": "kubectl get events --sort-by=.metadata.creationTimestamp",
    "logs": "echo 'üí° Usage: npm run logs <pod-name> [container-name]' && echo 'Example: npm run logs my-pod' && echo 'View recent logs: npm run logs my-pod -- -f --tail=50' && kubectl logs",
    "fix-devtron-service": "echo 'üîß Ensuring correct Devtron service configuration...' && echo '   Verifying and correcting service selector if necessary' && kubectl patch svc devtron-service -n devtroncd --type merge -p '{\"spec\":{\"selector\":{\"app\":\"dashboard\"}}}' && echo '‚úÖ Service verified/corrected.'",
    "port-forward-devtron": "echo 'üåê To access Devtron:' && echo '' && echo '1. Run in a separate terminal:' && echo '   kubectl port-forward svc/devtron-service -n devtroncd 8080:80' && echo '' && echo '2. Open your browser at:' && echo '   http://localhost:8080' && echo '' && echo '3. Credentials:' && echo '   Username: admin' && kubectl get secret devtron-secret -n devtroncd -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d | xargs echo '   Password:' && echo '' && echo 'To stop: Ctrl+C in the terminal'",
    "devtron-status": "echo 'üìä Devtron access information...' && echo 'Port-forward command:' && echo 'kubectl port-forward svc/devtron-service -n devtroncd 8080:80' && echo '' && echo 'URL: http://localhost:8080' && echo '' && echo 'Username: admin' && echo 'Password:' && kubectl get secret devtron-secret -n devtroncd -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d",
    "time-estimates": "echo '‚è±Ô∏è INSTALLATION TIME ESTIMATES ‚è±Ô∏è' && echo '' && echo 'üìã COMPLETE PROCESS: 20-28 minutes' && echo '' && echo '‚îú‚îÄ‚îÄ CDK Deploy (EKS Cluster): 15-20 minutes' && echo '‚îú‚îÄ‚îÄ Helm Install Devtron: 1-8 minutes' && echo '‚îú‚îÄ‚îÄ Complete initialization: 5-8 minutes' && echo '‚îî‚îÄ‚îÄ Approximate total: 20-28 minutes' && echo '' && echo 'üí° Phases: Infrastructure ‚Üí Devtron ‚Üí Initialization' && echo 'üí° Use \"npm run progress\" for real-time monitoring' && echo 'üöÄ Recent Devtron versions are 5x faster than before!'",
    "progress": "echo 'üìà CURRENT INSTALLATION STATUS üìà' && echo '' && echo 'üîç EKS Cluster:' && kubectl get nodes --no-headers 2>/dev/null | wc -l | xargs echo '   Active nodes:' || echo '   Active nodes: 0 (cluster not connected)' && kubectl get nodes --no-headers -o custom-columns=INSTANCE:.spec.providerID 2>/dev/null | head -1 | sed 's/.*i-//' | sed 's/\\/.*//' | xargs echo '   Instance type:' || echo '   Instance type: N/A' && echo '' && echo 'üê≥ Devtron Status:' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | wc -l | xargs echo '   Total pods:' || echo '   Total pods: 0 (Devtron not installed)' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | grep -c Running | xargs echo '   Running pods:' || echo '   Running pods: 0' && kubectl get installers installer-devtron -n devtroncd -o jsonpath='{.status.sync.status}' 2>/dev/null | xargs echo '   Installation status:' || echo '   Installation status: N/A (Devtron not installed)' && echo '' && echo 'üåê Next steps:' && kubectl get svc -n devtroncd devtron-service 2>/dev/null >/dev/null && echo '   ‚úÖ Devtron installed - use \"npm run devtron-status\"' || echo '   üìã Next: Install Devtron with INSTALL_DEVTRON.md (5-8 min)'",
    "cost-analysis": "echo 'üí∞ COST ANALYSIS üí∞' && echo '' && echo 'üìä Current Configuration:' && kubectl get nodes --no-headers -o custom-columns=INSTANCE:.spec.providerID 2>/dev/null | head -1 | sed 's/.*i-//' | sed 's/\\/.*//' | xargs echo '   Instance type:' || echo '   Instance type: N/A (cluster not connected)' && kubectl get nodes --no-headers 2>/dev/null | wc -l | xargs echo '   Current node count:' || echo '   Current node count: 0' && echo '   Auto-scaling: 2-10 nodes (configurable)' && echo '' && echo 'üíµ Approximate monthly costs (us-east-1, 730h/month):' && echo '   t3.medium (2vCPU, 4GB): ~$32/node/month' && echo '   t3.large (2vCPU, 8GB): ~$64/node/month' && echo '   EKS control plane: ~$70/month' && echo '' && echo 'üîç Recommendations:' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | wc -l | xargs echo '   Devtron pods:' || echo '   Devtron pods: 0' && echo '   ‚úÖ Development: t3.medium + 2-5 nodes (~$200-300/month)' && echo '   ‚ö° Production: t3.large + 3-10 nodes (~$400-800/month)' && echo '   üí° Optimization: Review instances every 2-4 weeks'",
    "health-check": "echo 'üè• SYSTEM HEALTH CHECK üè•' && echo '' && echo 'üîç Cluster status:' && kubectl cluster-info 2>/dev/null | head -1 || echo '   ‚ùå Cluster not connected' && echo '' && echo 'üìä System resources:' && kubectl top nodes 2>/dev/null | tail -n +2 | awk '{print \"   \" $1 \": CPU=\" $2 \", Memory=\" $3}' || echo '   ‚ö†Ô∏è  Information not available' && echo '' && echo 'üê≥ Critical pods status:' && kubectl get pods -n kube-system 2>/dev/null | grep -E '(coredns|kube-proxy|aws-node)' | awk '{print \"   \" $1 \": \" $3}' || echo '   ‚ö†Ô∏è  System components not found' && echo '' && echo 'üí° Recommendations:' && kubectl get events --field-selector type=Warning 2>/dev/null | wc -l | xargs echo '   Recent warning events:' | sed 's/0/‚úÖ System healthy/' | sed 's/[1-9].*/‚ö†Ô∏è  Review recent events/' || echo '   ‚ö†Ô∏è  Cannot verify events'",
    "cluster-info": "echo '‚ÑπÔ∏è  DETAILED CLUSTER INFORMATION ‚ÑπÔ∏è' && echo '' && echo 'üîç Basic information:' && kubectl cluster-info && echo '' && echo 'üìä Node statistics:' && kubectl get nodes -o custom-columns=NAME:.metadata.name,STATUS:.status.conditions[3].status,AGE:.status.nodeInfo.age,VERSION:.status.nodeInfo.kubeletVersion && echo '' && echo 'üê≥ Cluster resources:' && kubectl top nodes 2>/dev/null || echo '   ‚ö†Ô∏è  Metrics not available (install metrics-server)' && echo '' && echo 'üì¶ Namespaces:' && kubectl get namespaces --no-headers | wc -l | xargs echo '   Total namespaces:' && echo '' && echo 'üîê Current context:' && kubectl config current-context",
    "verify-setup": "echo 'üîç COMPLETE SETUP VERIFICATION üîç' && echo '' && echo '1. üìã Prerequisites:' && which kubectl >/dev/null 2>&1 && echo '   ‚úÖ kubectl installed' || echo '   ‚ùå kubectl not found' && which helm >/dev/null 2>&1 && echo '   ‚úÖ helm installed' || echo '   ‚ùå helm not found' && which aws >/dev/null 2>&1 && echo '   ‚úÖ awscli installed' || echo '   ‚ùå awscli not found' && echo '' && echo '2. üîê AWS Configuration:' && aws sts get-caller-identity >/dev/null 2>&1 && echo '   ‚úÖ AWS credentials configured' || echo '   ‚ùå AWS credentials not found' && echo '' && echo '3. ‚ò∏Ô∏è  Kubernetes Connection:' && kubectl cluster-info >/dev/null 2>&1 && echo '   ‚úÖ Connected to cluster' || echo '   ‚ùå Not connected to cluster' && echo '' && echo '4. üì¶ Devtron Status:' && kubectl get pods -n devtroncd >/dev/null 2>&1 && echo '   ‚úÖ Devtron installed' || echo '   ‚ùå Devtron not installed'",
    "backup-config": "echo 'üíæ CREATING CONFIGURATION BACKUP üíæ' && echo '' && mkdir -p backups/$(date +%Y%m%d_%H%M%S) && echo 'üìÅ Creating backup directory...' && cp -r lib/ backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null && cp package*.json backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null && cp cdk.* backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null && cp .env backups/$(date +%Y%m%d_%H%M%S)/ 2>/dev/null && echo '‚úÖ Backup completed at: backups/'$(date +%Y%m%d_%H%M%S) && echo 'üìã Files included: CDK config, package.json, .env'",
    "cleanup-devtron": "echo 'üóëÔ∏è CLEANING UP DEVTRON COMPLETELY üóëÔ∏è' && echo '' && echo 'Step 1: Uninstalling Helm release...' && helm uninstall devtron -n devtroncd --ignore-not-found=true && echo 'Step 2: Removing namespace devtroncd...' && kubectl delete namespace devtroncd --ignore-not-found=true && echo 'Step 3: Removing related namespaces...' && kubectl delete namespace devtron-cd --ignore-not-found=true && kubectl delete namespace devtron-ci --ignore-not-found=true && kubectl delete namespace devtron-demo --ignore-not-found=true && echo 'Step 4: Waiting for cleanup...' && sleep 10 && echo 'Step 5: Verification...' && kubectl get namespaces | grep -i devtron || echo '   ‚úÖ No Devtron namespaces found' && kubectl get pods -A | grep -i devtron || echo '   ‚úÖ No Devtron pods found' && echo '' && echo '‚úÖ Devtron cleanup completed!'",
    "cleanup-devtron-force": "echo 'üí• FORCE CLEANING DEVTRON üí•' && echo '' && echo '‚ö†Ô∏è  This will force delete all Devtron resources...' && kubectl delete namespace devtroncd --ignore-not-found=true --timeout=30s --grace-period=0 --force && kubectl delete namespace devtron-cd --ignore-not-found=true --timeout=30s --grace-period=0 --force && kubectl delete namespace devtron-ci --ignore-not-found=true --timeout=30s --grace-period=0 --force && kubectl delete namespace devtron-demo --ignore-not-found=true --timeout=30s --grace-period=0 --force && echo '‚úÖ Force cleanup completed!'",
    "cleanup-devtron-complete": "echo 'üíÄ COMPLETE DEVTRON DESTRUCTION üíÄ' && echo '' && echo '‚ö†Ô∏è  This will completely remove ALL Devtron resources from the cluster...' && echo '' && echo 'Step 1: Check existing Devtron resources...' && kubectl get namespaces | grep devtron && echo '' && echo 'Step 2: Remove all Devtron namespaces...' && kubectl delete namespace devtroncd --ignore-not-found=true && kubectl delete namespace devtron-ci --ignore-not-found=true && kubectl delete namespace devtron-demo --ignore-not-found=true && echo '' && echo 'Step 3: Remove cluster-level resources...' && kubectl delete clusterrolebinding devtron --ignore-not-found=true && kubectl delete clusterrole devtron --ignore-not-found=true && echo '' && echo 'Step 4: Remove Custom Resource Definition...' && kubectl delete crd installers.installer.devtron.ai --ignore-not-found=true && echo '' && echo 'Step 5: Final verification...' && echo 'Checking for remaining Devtron resources:' && kubectl get namespaces | grep devtron || echo '   ‚úÖ No Devtron namespaces found' && kubectl get clusterrole | grep devtron || echo '   ‚úÖ No Devtron cluster roles found' && kubectl get clusterrolebinding | grep devtron || echo '   ‚úÖ No Devtron cluster role bindings found' && kubectl get crd | grep devtron || echo '   ‚úÖ No Devtron CRDs found' && echo '' && echo 'üéâ COMPLETE DEVTRON DESTRUCTION FINISHED!'",
    "cleanup-devtron-dry-run": "echo 'üîç DEVTRON CLEANUP DRY RUN üîç' && echo '' && echo 'Resources that would be deleted:' && echo 'Namespaces:' && kubectl get namespaces | grep -i devtron || echo '   None found' && echo 'Pods:' && kubectl get pods -A | grep -i devtron || echo '   None found' && echo 'Services:' && kubectl get svc -A | grep -i devtron || echo '   None found' && echo 'Deployments:' && kubectl get deployments -A | grep -i devtron || echo '   None found' && echo 'Helm releases:' && helm list -A | grep -i devtron || echo '   None found'",
    "cleanup-devtron-pvcs": "echo 'üóÇÔ∏è CLEANING UP DEVTRON PERSISTENT VOLUMES üóÇÔ∏è' && echo '' && echo 'Finding Devtron PVCs...' && kubectl get pvc -A | grep -i devtron || echo '   No Devtron PVCs found' && echo 'Finding Devtron PVs...' && kubectl get pv | grep -i devtron || echo '   No Devtron PVs found' && echo 'To delete PVCs run: kubectl delete pvc -n devtroncd --all'",
    "check-devtron-resources": "echo 'üîç CHECKING DEVTRON RESOURCES üîç' && echo '' && echo 'Namespaces:' && kubectl get namespaces | grep devtron || echo '   None found' && echo '' && echo 'Cluster Roles:' && kubectl get clusterrole | grep devtron || echo '   None found' && echo '' && echo 'Cluster Role Bindings:' && kubectl get clusterrolebinding | grep devtron || echo '   None found' && echo '' && echo 'CRDs:' && kubectl get crd | grep devtron || echo '   None found' && echo '' && echo 'Helm Releases:' && helm list -A | grep devtron || echo '   None found'",
    "devtron-performance": "echo 'üöÄ DEVTRON PERFORMANCE UPDATE üöÄ' && echo '' && echo 'üìä Recent Installation Times (EKS):' && echo '   Helm Install: 1-8 minutes' && echo '   Complete Setup: 5-8 minutes' && echo '   Total: 5-8 minutes' && echo '' && echo '‚ö° Performance Improvements:' && echo '   Previous versions: 20-50 minutes' && echo '   Current version: 5-8 minutes' && echo '   Improvement: 5x faster!' && echo '' && echo 'üéØ Why So Fast Now?' && echo '   ‚úÖ Optimized Helm charts for EKS' && echo '   ‚úÖ Better CRD installation' && echo '   ‚úÖ Improved service mesh setup' && echo '   ‚úÖ PostgreSQL optimization' && echo '' && echo 'üí° Use \"npm run time-estimates\" for complete timeline'"
    "quick-start": "echo 'üöÄ QUICK START GUIDE üöÄ' && echo '' && echo 'üìã Steps to get started:' && echo '' && echo '1. üõ†Ô∏è  Configure environment variables:' && echo '   export ENV_NAME=dev' && echo '   export PROJECT_NAME=devtron' && echo '   export AWS_ACCOUNT=your-aws-account' && echo '   export AWS_REGION=us-east-1' && echo '' && echo '2. ‚ò∏Ô∏è  Deploy EKS cluster:' && echo '   npm run deploy' && echo '' && echo '3. üîó Connect to cluster:' && echo '   npm run connect-cluster' && echo '' && echo '4. üìä Check status:' && echo '   npm run progress' && echo '' && echo '5. üöÄ Install Devtron:' && echo '   Follow INSTALL_DEVTRON.md (5-8 min)' && echo '' && echo '6. üåê Access Devtron:' && echo '   npm run devtron-status' && echo '' && echo 'üóëÔ∏è Cleanup Devtron:' && echo '   npm run cleanup-devtron (standard)' && echo '   npm run cleanup-devtron-complete (full destruction)'"
  },
  "devDependencies": {
    "@types/dotenv": "^6.1.1",
    "@types/jest": "^29.5.14",
    "@types/node": "22.7.9",
    "aws-cdk": "2.1026.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "~5.6.3"
  },
  "dependencies": {
    "@aws-cdk/aws-eks-v2-alpha": "^2.213.0-alpha.0",

    "aws-cdk-lib": "^2.213.0",
    "constructs": "^10.0.0",
    "dotenv": "^17.2.1"
  }
}
