{
  "name": "eks-cdk",
  "version": "0.1.0",
  "bin": {
    "main": "bin/main.js"
  },
  "scripts": {
    "build": "tsc",
    "test": "jest",
    "cdk": "cdk",
    "deploy": "cdk deploy --require-approval never --profile AWS_PROFILE",
    "destroy": "cdk destroy --profile AWS_PROFILE",
    "connect": "echo 'Para conectar al cluster EKS:' && echo '' && echo '1. Opción automática (usa el nombre por defecto):' && echo '   npm run connect-cluster' && echo '' && echo '2. Opción manual (especifica el nombre del cluster):' && echo '   aws eks update-kubeconfig --region us-east-1 --name devtron-dev-cluster --profile AWS_PROFILE' && echo '' && echo 'Después de conectar, verifica con:' && echo '   npm run status'",
    "connect-cluster": "echo 'Conectando al cluster EKS...' && aws eks update-kubeconfig --region us-east-1 --name devtron-dev-cluster --profile AWS_PROFILE && echo '✅ Conexión configurada. Verificando...' && kubectl cluster-info",
    "status": "kubectl cluster-info && kubectl get nodes",
    "pods": "kubectl get pods -A",
    "services": "kubectl get svc -A",
    "nodes": "kubectl get nodes --label-columns=eks.amazonaws.com/nodegroup",
    "events": "kubectl get events --sort-by=.metadata.creationTimestamp",
    "logs": "kubectl logs",
    "fix-lb-public": "echo '⏱️ Configurando LoadBalancer internet-facing (3-7 minutos)...' && kubectl patch svc devtron-service -n devtroncd --type merge -p '{\"metadata\":{\"annotations\":{\"service.beta.kubernetes.io/aws-load-balancer-type\":\"nlb\",\"service.beta.kubernetes.io/aws-load-balancer-scheme\":\"internet-facing\",\"service.beta.kubernetes.io/aws-load-balancer-nlb-target-type\":\"ip\"}}}' && echo '✅ Configuración aplicada. Espera 3-7 minutos para que AWS complete la recreación del LoadBalancer.'",
    "fix-devtron-service": "echo '🔧 Arreglando configuración completa del servicio Devtron...' && echo '   1. Corrigiendo selector del servicio (app=devtron → app=dashboard)' && echo '   2. Configurando LoadBalancer internet-facing' && kubectl patch svc devtron-service -n devtroncd --type merge -p '{\"spec\":{\"selector\":{\"app\":\"dashboard\"}},\"metadata\":{\"annotations\":{\"service.beta.kubernetes.io/aws-load-balancer-type\":\"nlb\",\"service.beta.kubernetes.io/aws-load-balancer-scheme\":\"internet-facing\",\"service.beta.kubernetes.io/aws-load-balancer-nlb-target-type\":\"ip\"}}}' && echo '✅ Servicio corregido. Espera 3-7 minutos para que AWS complete la recreación del LoadBalancer.'",
    "verify-lb": "echo '🔍 Verificando estado del LoadBalancer...' && kubectl get svc devtron-service -n devtroncd -o wide",
    "devtron-status": "echo '📊 Obteniendo URL y contraseña de Devtron...' && echo 'URL:' && kubectl get svc devtron-service -n devtroncd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' && echo '' && echo 'Contraseña Admin:' && kubectl get secret devtron-secret -n devtroncd -o jsonpath='{.data.ADMIN_PASSWORD}' | base64 -d",
    "time-estimates": "echo '⏱️ TIEMPOS ESTIMADOS DE INSTALACIÓN ⏱️' && echo '' && echo '📋 PROCESO COMPLETO: 20-50 minutos' && echo '' && echo '├── CDK Deploy: 5-15 minutos' && echo '├── Helm Install Devtron: 3-8 minutos' && echo '├── Inicialización completa: 10-20 minutos' && echo '├── LoadBalancer internet-facing: 3-7 minutos' && echo '└── Total aproximado: 20-50 minutos' && echo '' && echo '💡 Usa \"npm run status\" para ver progreso actual'",
    "progress": "echo '📈 ESTADO ACTUAL DE INSTALACIÓN 📈' && echo '' && echo '🔍 Cluster EKS:' && kubectl get nodes --no-headers | wc -l | xargs echo '   Nodos:' && kubectl get nodes --no-headers -o custom-columns=INSTANCE:.spec.providerID | head -1 | sed 's/.*i-//' | sed 's/\\/.*//' | xargs echo '   Tipo de instancia:' && echo '' && echo '🐳 Pods Devtron:' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | wc -l | xargs echo '   Total pods:' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | grep -c Running | xargs echo '   Pods corriendo:' && echo '' && echo '🌐 LoadBalancer:' && kubectl get svc devtron-service -n devtroncd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null | xargs echo '   URL:' || echo '   URL: Aún no disponible' && echo '' && echo '📊 Estado instalación:' && kubectl get installers installer-devtron -n devtroncd -o jsonpath='{.status.sync.status}' 2>/dev/null | xargs echo '   Devtron:' || echo '   Devtron: Aún no disponible'",
    "cost-analysis": "echo '💰 ANÁLISIS DE COSTOS 💰' && echo '' && echo '📊 Configuración Actual:' && kubectl get nodes --no-headers -o custom-columns=INSTANCE:.spec.providerID | head -1 | sed 's/.*i-//' | sed 's/\\/.*//' | xargs echo '   Tipo de instancia:' && kubectl get nodes --no-headers | wc -l | xargs echo '   Número de nodos actuales:' && echo '   Escalado automático: 3-8 nodos (dev) / 3-15 nodos (prod)' && echo '' && echo '💵 Estimación mensual (us-east-1):' && echo '   t3.medium (2vCPU, 4GB): ~$25-30/nodo' && echo '   t3.large (2vCPU, 8GB): ~$55-65/nodo' && echo '' && echo '🔍 Recomendaciones:' && kubectl get pods -n devtroncd --no-headers 2>/dev/null | wc -l | xargs echo '   Pods Devtron:' && echo '   ✅ Para desarrollo: t3.medium + 3-8 nodos' && echo '   ⚡ Para producción: t3.large + 3-15 nodos'"
  },
  "devDependencies": {
    "@types/dotenv": "^6.1.1",
    "@types/jest": "^29.5.14",
    "@types/node": "22.7.9",
    "aws-cdk": "2.1026.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "~5.6.3"
  },
  "dependencies": {
    "@aws-cdk/aws-eks-v2-alpha": "^2.213.0-alpha.0",
    "@aws-cdk/lambda-layer-kubectl-v32": "^2.1.0",
    "aws-cdk-lib": "^2.213.0",
    "constructs": "^10.0.0",
    "dotenv": "^17.2.1"
  }
}
